import discord
import asyncio
from asyncio import sleep
from discord import utils
from discord.ext import tasks
from discord.ext.commands import Bot
from discord import colour
from discord import embeds
from discord.ext import commands
import random
from discord import guild
from discord import mentions

PREFIX = ('>')
bot= commands.Bot(command_prefix=PREFIX, description='Hi')

# –°–¢–ê–¢–£–°
# –∑–∞–¥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –æ–Ω–ª–∞–π–Ω
@bot.event
async def on_ready():
  while True:
    await bot.change_presence(activity=discord.Activity(type=discord.ActivityType.listening, name="–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∞—è –û–±–æ—Ä–æ–Ω–∞"))
    await sleep (60)
    await bot.change_presence(status=discord.Status.online, activity=discord.Game(name="–ì–æ—Ä–Ω–∏–ª–æ", type=3))
    await sleep (60)
    await bot.change_presence(status=discord.Status.online, activity=discord.Game(name="Genshin Impact", type=3))
    await sleep (60)
    await bot.change_presence(status=discord.Status.online, activity=discord.Game(name="–î–æ–≥–æ–Ω–∏ –º–µ–Ω—è –∫–∏—Ä–ø–∏—á", type=3))
    await sleep (60)
print("–ê—Ä—Ç—É—Ä–∏—è –≥–æ—Ç–æ–≤–∞!")

#–ö–û–ú–ê–ù–î–´
# –ø–æ–º–æ—â—å
@bot.command()
async def –ø–æ–º–æ—â—å(ctx):
  emb = discord.Embed(colour=discord.Colour.blue(),title='–ü—Ä–µ—Ñ–∏–∫—Å –±–æ—Ç–∞: >')
  emb.set_thumbnail(url="https://telegra.ph/file/8593bb2489b650090b39b.png")
  emb.set_footer(text='–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n>–ø–æ–º–æ—â—å\n>–ø—Ä–µ—Ñ–∏–∫—Å\n>–≤–µ—Ä—Å–∏—è\n>—Å—Å—ã–ª–∫–∏\n>–¥–∞\n>–Ω–µ—Ç\n>—É–¥–∞—Ä–∏—Ç—å\n')
  await ctx.author.send(embed=emb)

# —Å—Å—ã–ª–∫–∏
@bot.command()
async def —Å—Å—ã–ª–∫–∏(ctx):
  emb = discord.Embed(colour=discord.Colour.blue(),title='–ü—Ä–∏–≤–µ—Ç!\n–í–æ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–∞—à –∫–ª–∞–Ω:')
  emb.description = ':white_small_square:[Bungie.net](https://www.bungie.net/ru/ClanV2/Index?groupId=4406402)\n:white_small_square:[Discord](https://discord.gg/zAewvnTp3X)'
  await ctx.author.send(embed=emb)

# –¥–∞
@bot.command()
async def –¥–∞(ctx):
  await ctx.send('–ø–∏–∑–¥–∞ :)')

# –ø—Ä–µ—Ñ–∏–∫—Å
@bot.command()
async def –ø—Ä–µ—Ñ–∏–∫—Å(ctx):
  await ctx.send('–ú–æ–π –ø—Ä–µ—Ñ–∏–∫—Å: >')

# –≤–µ—Ä—Å–∏—è
@bot.command()
async def –≤–µ—Ä—Å–∏—è(ctx):
  await ctx.send('–í–µ—Ä—Å–∏—è –±–æ—Ç–∞: 0.0.2b')

# –Ω–µ—Ç
@bot.command()
async def –Ω–µ—Ç(ctx):
  await ctx.send('–ø–∏–¥–æ—Ä–∞ –æ—Ç–≤–µ—Ç :)')

# –∞–≤—Ç–æ—Ä
@bot.command()
async def –∞–≤—Ç–æ—Ä(ctx):
  await ctx.send('–ê–≤—Ç–æ—Ä –±–æ—Ç–∞ - <@178517568305364992>')

# —É–¥–∞—Ä–∏—Ç—å
@bot.command()
async def —É–¥–∞—Ä–∏—Ç—å(ctx, member: discord.Member = None):
  arg1 = f"{ctx.author.mention} –ø—ã—Ç–∞–µ—Ç—Å—è —É–¥–∞—Ä–∏—Ç—å {member.mention}, –Ω–æ –ø—Ä–æ–º–∞—Ö–∏–≤–∞–µ—Ç—Å—è!"
  arg2 = f"{ctx.author.mention} —Å—Ç—É–∫–∞–µ—Ç {member.mention}!"
  arg3 = f"{ctx.author.mention} –∫–∏–¥–∞–µ—Ç –ø–∞–ª–∫—É –≤ {member.mention} –∏ –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –ª–∏—Ü–æ."
  arg4 = f"{ctx.author.mention} –∫–∞—Å—Ç—É–µ—Ç —Ñ–∞–µ—Ä–±–æ–ª–ª –≤ {member.mention}, –Ω–æ –æ–Ω –ø–æ—á–µ–º—É-—Ç–æ –≥–∞—Å–Ω–µ—Ç –Ω–∞ –ø–æ–ª–ø—É—Ç–∏."
  arg5 = f"{ctx.author.mention} –ø—ã—Ç–∞–µ—Ç—Å—è —É–∫—É—Å–∏—Ç—å {member.mention} –∑–∞ –Ω–æ–≥—É!"
  arg6 = f"{ctx.author.mention} –∑–∞—Å–æ–≤—ã–≤–µ—Ç —Å–Ω–µ–∂–æ–∫ –≤ –≤–æ—Ä–æ—Ç–Ω–∏–∫ {member.mention}."
  arg7 = f"{ctx.author.mention} –¥–∞–µ—Ç –ø–æ–¥–∂–æ–ø–Ω–∏–∫ {member.mention}."
  arg8 = f"{ctx.author.mention} –¥–∞–µ—Ç —â–µ–ª–±–∞–Ω {member.mention}."
  test_list = [arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8]
  if member == None:
      return
  await ctx.channel.send(random.choice(test_list))

class MyClient(discord.Client):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

        self.role_message_id = 960279710754021437  # ID of the message that can be reacted to to add/remove a role.
        self.emoji_to_role = {
            discord.PartialEmoji(name=':green_circle:'): ,  # ID of the role associated with unicode emoji 'üî¥'.
            discord.PartialEmoji(name=':red_circle:'): ,  # ID of the role associated with unicode emoji 'üü°'.
            discord.PartialEmoji(name=':purple_circle:'): ,  # ID of the role associated with a partial emoji's ID.
        }

    async def on_raw_reaction_add(self, payload: discord.RawReactionActionEvent):
        """Gives a role based on a reaction emoji."""
        # Make sure that the message the user is reacting to is the one we care about.
        if payload.message_id != self.role_message_id:
            return

        guild = self.get_guild(payload.guild_id)
        if guild is None:
            # Check if we're still in the guild and it's cached.
            return

        try:
            role_id = self.emoji_to_role[payload.emoji]
        except KeyError:
            # If the emoji isn't the one we care about then exit as well.
            return

        role = guild.get_role(role_id)
        if role is None:
            # Make sure the role still exists and is valid.
            return

        try:
            # Finally, add the role.
            await payload.member.add_roles(role)
        except discord.HTTPException:
            # If we want to do something in case of errors we'd do it here.
            pass

    async def on_raw_reaction_remove(self, payload: discord.RawReactionActionEvent):
        """Removes a role based on a reaction emoji."""
        # Make sure that the message the user is reacting to is the one we care about.
        if payload.message_id != self.role_message_id:
            return

        guild = self.get_guild(payload.guild_id)
        if guild is None:
            # Check if we're still in the guild and it's cached.
            return

        try:
            role_id = self.emoji_to_role[payload.emoji]
        except KeyError:
            # If the emoji isn't the one we care about then exit as well.
            return

        role = guild.get_role(role_id)
        if role is None:
            # Make sure the role still exists and is valid.
            return

        # The payload for `on_raw_reaction_remove` does not provide `.member`
        # so we must get the member ourselves from the payload's `.user_id`.
        member = guild.get_member(payload.user_id)
        if member is None:
            # Make sure the member still exists and is valid.
            return

        try:
            # Finally, remove the role.
            await member.remove_roles(role)
        except discord.HTTPException:
            # If we want to do something in case of errors we'd do it here.
            pass


intents = discord.Intents.default()
intents.members = True
bot.run('')
